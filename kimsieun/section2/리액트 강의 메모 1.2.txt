리액트 강의 메모 1.2

- CamelCase 표기법
- 화살표 함수 ()=>
이름이 없는 익명 함수
function() {
   ...
}
조금더 간단한 버전(화살표함수)
() => {
   ...
}
매개변수 목록 괄호 생략가능
하나의 매개변수만 사용하는 경우, 괄호 생략 가능
(userName) => { ... }
userName => { ... }
함수에 매개변수가 없거나 둘 이상일 경우, 괄호 생략 불가능
() => { ... } 
(userName, userAge) => { ... } 라고 써야 합니다.

함수 본문 중괄호 생략하기
화살표 함수에 반환문 외에 다른 로직이 없는 경우, return키워드와 중괄호를 생략할 수 있습니다.
number => {   return number * 3;}
number => number * 3;

number => return number * 3; 
// 이 경우 retrun 키워드는 생략되어야 하므로, 오류
number => if (number === 2) { return 5 }; 
// 이 경우 if 문은 반환될 수 없으므로 오류

특수한 경우: 객체만 반환하는 경우
number => ({ age: number }); 
// 추가 괄호를 써서 객체를 감싸줍니다.
객체와 중괄호를 추가 괄호로 감싸면, 자바스크립트는 중괄호가 함수 본문을 정의하는 것이 아니라 객체를 생성하기 위한 것임을 이해합니다. 따라서 객체가 반환됩니다.

- 객체와 클래스
const user = {
   name: 'sieun'
  age: 21,
  greet() {
    ...
  }
};

class User {
  constructor(name,age){
    this.name = name;
    this.age = age;
  }
  greet() {
    ...
  }
}
const user1 = new User('sieun', 21) // 객체생성 및 초기화

- 배열 및 배열 메소드
const hobbies = ['sport', 'game'];
인덱스는 0부터
배열안에 배열이 있을 수도 있음
push 메소드
새 원소 추가
findIndex 메소드
특정 값의 인덱스 찾음
hobbies.findIndex((item)=> { item === 'game' }
map 메소드
배열의 모든 원소를 다른 원소로 변환
const newmap = hobbies.map((item)=> item + '!');
새 배열로 반환

- 디스트럭처링
배열 및 객체의 분해
const userName = ['si', 'eun'];
const firstName = userName[0];
대신에 바로 선언할 때 입력 가능
const [firstName, lastName] = ['si', 'eun'];

비슷하게 객체에서도 분해 가능
const {name: userName, age} = {
  name: 'sieun',
  age: 21
}

함수 매개변수 목록에서 디스트럭처링
function storeOrder(order) {
  localStorage.setItem('id', order.id);
  localStorage.setItem('currency', order.currency);
}

storeOrder 함수 본문 내부의 "점 표기법"을 통해 order 프로퍼티에 접근하지 않고, 다음과 같이 디스트럭처링을 사용할 수 있습니다:
function storeOrder({id, currency}) { // 디스트럭처링
  localStorage.setItem('id', id);
  localStorage.setItem('currency', currency);
}

- 스프레드 연산자 ...
const hobbies = ['g', 'c'];
const newhobbies = ['r'];

const mergedHobbies = [hobbies, newhobbies]
이렇게 하면 mergedHobbies는 원소로 두개의 배열을 가진 배열이 됨
const mergedHobbies = [...hobbies, ...newhobbies]
...을 이용하면 각 배열의 원소들을 가져와서 배열을 만들기 때문에 
mergedHobbies는 'g', 'c', 'r'의 값을 가지는 배열이 됨
(...은 ,로 구분된 개별 값을 새 배열에 추가하는 역할)

객체에도 사용가능
const user = {
  name: 'si',
  age: 21
};

const newUser = {
  isAdult: true,
 ...user
 // 객체 user 자체가 아닌, user의 name, age 값을 가져옴
};

- 배열 for 문
for (const hobby of hobbies) {}
배열 hobbies를 순환함

- 함수를 다른 함수에 값으로 전달 가능
function a1() { ... }
const a2 = () => { ... } //함수 생성 두가지 방법

setTimeout(a1, 2000); -> 이름만 전달, 함수 자체를 전달
setTimeout(a2()); -> ()까지 전달, a2 함수 실행 후 리턴값 인자로 전달
setTimeout함수는 내장된 함수로, 두번째 인자는 첫번째 인자의 함수를 실행할 때까지 대기할 밀리초 단위의 숫자

- 함수 내부에서 함수 정의 가능
function a1() {
  function a2() { ... }
}
a1(); 가능
a2(); 불가능 -> a1 함수 안에서 선언되었기에 내부에서만 사용 가능

- 참조형과 기본값
기본형 값은 변경 불가
객체는 참조형 값
해당 값의 메모리 주소를 저장
-> 배열 수정되지만 주소값은 그대로

- 배열 함수 map, find, findIndex, filter, reduce, concat, slice, splice 등

section3
- 컴포넌트
잠재적으로 재사용이 가능한 구성 요소
리액트 앱은 컴포넌트를 결합하여 만들어짐
사용이유는 작업 단순화 위함

- 리액트 프젝
npm install 설치
npm run dev  실행

index.html 파일의 <script type="module" src="/src/index.jsx"></script>
index.jsx파일의 import App from "./App.jsx";
App.jsx파일 -> 화면에 보이는 내용의 코드

jsx 확장자 -> 비표준의 자바스크립트 문법
JavaScript Syntax Extension => js 문법 확장자를 의미

JSX는 개발자가 자바스크립트 파일 내에 HTML 마크업 코드를 작성하여 HTML 요소를 설명하고 생성할 수 있음

리액트에서 컴포넌트 = js에서의 함수
리액트 컴포넌트 규칙
1. 함수의 제목이 대문자로 시작
2. 함수에서 렌더링 가능한 값이 반환 되어야 함

컴포넌트 생성
function [컴포넌트 이름 시작은 대문자로]() {
  return(
   ...코드 내용들
  )
}

컴포넌트 사용 
<[컴포넌트이름]></[컴포넌트이름]>
<[컴포넌트이름] /> //위의 간단 버전

- import와 export 키워드는 일반적인 js 기능임

실행시 파일 경로 



