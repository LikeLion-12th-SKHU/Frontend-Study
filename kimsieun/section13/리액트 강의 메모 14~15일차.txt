리액트 강의 메모 240118

Section 13: 리액트와 최적화 테크닉 살펴보기(A Look Behind The Scenes Of React & Optimization Techniques)

- 모듈 소개
npm install
npm run dev

- 리액트의 컴포넌트 트리 생성 / 리액트가 시스템 뒷편에서 동작하는 방식
렌더링한다 = 컴포넌트 함수 실행한다
ReactDOM.createRoot(document.getElementById('root')).render(<App />);
App 컴포넌트 생성 및 렌더링 
컴포넌트 함수안의 함수는 일단 한번 실행됨

- 리액트 DevTools Profiler로 컴포넌트 함수 실행 분석하기
확장 모드로 컴포넌트 구조 볼 수 있음

- memo()로 컴포넌트 함수 실행 방지
입력 구간이 앱 컴포넌트에 속해 있다면 앱 컴포넌트에 있는 다른 함수들이 다시 실행됨
-> 다른 컴포넌트를 생성하여 재실행 방지 가능
재실행을 ㅂ아지할 수 있는 컴포넌트와 최대한 상위 컴포넌트 트리에 있는 컴포넌틋 ㅏ용하기

- 컴포넌트 함수 실행을 방지를 위한 구조
state, onSet 사용
상태가 바뀌어도 자식 컴포넌트의 재실행은 부모 컴포넌트를 재실행하지 않음

- useCallback() 훅 이해하기
버튼 컴포넌트는 재실행되지 않는게 좋음
-> memo()로 감싸기
useCallBack 훅으로 감싸기
함수의 재생성 방지를 위해 사용
useEffect의 의존성으로 갖고 있을 때 필요
memo 사용시 필요(재실행 방지용)

- useMemo() 훅 이해하기
컴포넌트 함수안에 있는 일반 함수들을 감싸고 그 함수들의 재실행 방지함
복잡한 계산이 있을때만 사용
의존성 배열 필요
리액트로 이 함수를 실행시키고 useMomo로 전달
의존성이 하나라도 바뀔 경우에만 재실행됨

- 리액트의 가상 DOM 사용 - 직접 살펴보기
페이지 새로고침하거나 처음 방문헀을 때
html 요소가 컴포넌트들에서 반환되어 DOM으로 삽입
컴포넌트들이 재실행된다고 해서 모든 jsx 코드가 dom으로 재삽입되지는 않음
바뀌는 요소들에만 코드가 변경됨
-> 리액트가 가상 DOM을 사용하기 때문에 가능한 일
리액트는 실제 DOM을 매번 바꾸지 않고 스냅샷을 만들어서 비교하여 필요한 변동사항들만 적용시킴

- State(상태)를 관리할 때 Key(키)의 역할
컴포넌트 함수에 등록된 상태는 해당 컴포넌트의 범위 내에 속해있음
컴포넌트를 재사용할 때마다 재생성됨
상태는 컴포넌트 유형과 위치에 속해있음
리액트는 key를 제공
같은 타입의 형제 컴포넌트가 있을 때 생기는 문제 때문
-> 강제적으로 key 입력을 요구
비슷한 컴포넌트를 포함한 동적인 목록이 있을 때 리액트가 컴포넌트를 확실이 식별해내도록 하기 위해 존재

- Key(키)가 중요한 이유 부가 설명
스냅샷 비교해서 DOM 변경할 때도 유용함

- State(상태) 스케줄링 & 배칭
새로운 상태값은 설정한 직후에는 사용할 수 없음
컴포넌트 함수가 재실행해야 가능
같은 함수 내에서 여러 상태들이 업데이트가 되면 다같이 배칭되어서 한번의 컴포넌트 함수 재실행을 유도함

- MillionJS로 리액트 최적화하기
리액트 무료 패키지
npm install million
vite.config.js
import million from 'million/compiler'; 추가
// million-ignore 로 오류 고침


<install 오류로 일단 보류>
Section 14: 컴포넌트를 구축하는 다른 방법: 클래스 컴포넌트

- 모듈 소개
최근에는 이 방법을 잘 사용하지 않음

- 무엇을 & 왜
함수에 대한 대한..?
지금까지는 함수형 컴포넌트 사용
이 섹션엔 클래스형 컴포넌트
class Product extends Component { render() {...} }

- 퍼스트 클래스 기반 컴포넌트 추가하기
class 예약어 사용하기
이건 리액트가 지원하는 것이 아니라 js에서 지원하는 문법
모던 자바스크립트는 클래스를 지원함


- State 및 이벤트 작업하기
https://academind.com/tutorials/this-keyword-function-references
- 컴포넌트 수명 주기(클래스 컴포넌트에만 해당!)

- 사용 중인 수명 주기 방법

- 클래스 컴포넌트 및 컨텍스트
04:53
클래스 컴포넌트 대 함수형 컴포넌트: 요약
02:42
오류 경계 소개
09:52
모듈 리소스
