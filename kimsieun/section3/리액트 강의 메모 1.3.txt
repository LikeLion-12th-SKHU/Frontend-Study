리액트 강의 메모 1.3

- 동적 값 출력 및 활용 [핵심 개념]
동적인 값을 출력하기 위해서는 {}를 사용함
속성 값으로도 사용 가능
{1+1} -> 2로 출력
{}안에는 함수가 있어도, 변수가 있어도 가능 

- 동적 HTML Attributes(속성) 설정 & 이미지 파일 로딩
배포 과정에서 모든 코드가 변환 및 최적화되고 함꼐 묶여지는 과정에서 이미지 파일이 손상될 수 있음
따라서 import를 사용하여 사용하는 것을 권장
ex) import reactImg from './assets/react-core-concepts.png';
src={ reactImg }로 사용

- Prop(속성)으로 컴포넌트 재사용 [핵심 개념]
컴포넌트를 재사용하면서 사용할 때마다 다른 데이터를 전달하기 위해 props 사용
컴포넌트는 일반적으로 props라는 하나의 매개변수만 사용

- Props(속성) 대체 문법
<CoreConcept
 title={CORE_CONCEPTS[0].title}
 description={CORE_CONCEPTS[0].description}
 image={CORE_CONCEPTS[0].image}
/>
대신에, CORE_CONCEPTS 배열의 키값들이 title, description 처럼 속성 이름과 같다면 축약해서 쓸 수 있는 문법 ...(스프레드 연산자) 사용
<CoreConcept {...CORE_CONCEPTS[0]}/>
위와 동일한 기능
function CoreConcept(props) {
  return (
    <li>
      <img src={props.image} alt={props.title} />
      <h3>{props.title}</h3>
      <p>{props.description}</p>
    </li>
  );
} 에서 props 대신에 매개변수의 함수를 구조분해하는 개폐 중괄호 사용
function CoreConcept({image, title, description}) {
  return (
    <li>
      <img src={image} alt={title} />
      <h3>{title}</h3>
      <p>{description}</p>
    </li>
  );
}
위와 동일한 기능(좀 더 짧아짐)

- 추천 실습: 파일에 컴포넌트 저장 및 좋은 프로젝트 구조 활용
컴포넌트 별로 파일을 따로 저장하는 것이 좋음

- 컴포넌트 옆에 컴포넌트 스타일 파일 저장하기
import './Header.css';
파일 생성하고 스타일 코드 작성 후 import 필수

- 컴포넌트 구성: 특별한 “children” Prop (“자녀” 속성)
export default function TabButton({ children }) { 
  return (
    <li>
      <button>{children}</button>
    </li>
  );
} //혹은 props, {props.children}
<TabButton>Components</TabButton>
TabButton 객체의 자식 요소는 text 객체인 Components가 됨

- 이벤트 처리하기 [핵심 개념]
이벤트 리스너
이건 js 공부하면서 배운거 응용 잘..하기
export default function TabButton({ children }) {
  function handleClick() {
    console.log('Hello World!');
  }

  return (
    <li>
      <button onClick={handleClick}>{children}</button>
    </li>
  );
}

- 함수를 Prop(속성)의 값으로 전달하기
onSelect={handleSelect}

- 이벤트 함수에 커스텀 인자 전달하기
onSelect={() => handleSelect('components')
function handleSelect(selectedButton) {
    // selectedButton => 'components', 'jsx', 'props', 'state'
    console.log(selectedButton);
  }

- UI를 업데이트하지 않는 법 - 리액트의 뒷편 살펴보기 [핵심 개념]
기본적으로 리액트는 컴포넌트 함수를 코드 내에서 한번만 실행함

- State(상태) 관리 & Hooks(훅) 사용법 [핵심 개념]
state를 사용하면 여러번 실행하여 데이터의 값을 업데이트할 수 있음
import { useState } from 'react';
임포트해야 사용 가능
중첩 불가능이기 때문에 함수(if문 등 포함)안에 useState()사용 불가능
그러나 컴포넌트 안에서 사용해야함(보통 App 컴포넌트 안 첫줄에 사용)
const [selectedTopic, setSelectedTopic] = useState('components');
selectedTopic -> 현재 값
setSelectedTopic -> 값 업데이트
useState('components') -> 현재값='컴포넌트'로 초기값 설정
function handleSelect(selectedButton) {
    setSelectedTopic(selectedButton) -> 현재값=선택된값
 }
이렇게 사용가능

- 데이터 기반 State(상태) 가져오기 및 출력


